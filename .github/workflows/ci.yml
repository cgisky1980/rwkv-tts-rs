name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Run Clippy
      run: cargo clippy -- -D warnings

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    if: startsWith(github.ref, 'refs/tags/')
    env:
      CARGO_NET_RETRY: 10
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rwkvtts_server.exe
            asset_name: rwkv-tts-rs-windows-x64.zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rwkvtts_server
            asset_name: rwkv-tts-rs-linux-x64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rwkvtts_server
            asset_name: rwkv-tts-rs-macos-x64.tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
        restore-keys: |
          ${{ runner.os }}-cargo-
      continue-on-error: true

    - name: Clean cargo cache if needed
      run: |
        echo "Cleaning cargo cache to prevent corruption issues"
        cargo clean
      continue-on-error: true

    - name: Install ONNX Runtime (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $url = "https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-win-x64-1.22.0.zip"
        Invoke-WebRequest -Uri $url -OutFile "onnxruntime.zip"
        Expand-Archive -Path "onnxruntime.zip" -DestinationPath "."
        $env:ORT_LIB_LOCATION = "$PWD\onnxruntime-win-x64-1.22.0\lib"
        echo "ORT_LIB_LOCATION=$env:ORT_LIB_LOCATION" >> $env:GITHUB_ENV
        $env:PATH += ";$PWD\onnxruntime-win-x64-1.22.0\lib"
        echo "$PWD\onnxruntime-win-x64-1.22.0\lib" >> $env:GITHUB_PATH

    - name: Install ONNX Runtime (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
        tar -xzf onnxruntime-linux-x64-1.22.0.tgz
        export ORT_LIB_LOCATION="$PWD/onnxruntime-linux-x64-1.22.0/lib"
        echo "ORT_LIB_LOCATION=$ORT_LIB_LOCATION" >> $GITHUB_ENV
        export LD_LIBRARY_PATH="$PWD/onnxruntime-linux-x64-1.22.0/lib:$LD_LIBRARY_PATH"
        echo "$PWD/onnxruntime-linux-x64-1.22.0/lib" >> $GITHUB_PATH

    - name: Install ONNX Runtime (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-osx-x86_64-1.22.0.tgz
        tar -xzf onnxruntime-osx-x86_64-1.22.0.tgz
        export ORT_LIB_LOCATION="$PWD/onnxruntime-osx-x86_64-1.22.0/lib"
        echo "ORT_LIB_LOCATION=$ORT_LIB_LOCATION" >> $GITHUB_ENV
        export DYLD_LIBRARY_PATH="$PWD/onnxruntime-osx-x86_64-1.22.0/lib:$DYLD_LIBRARY_PATH"
        echo "$PWD/onnxruntime-osx-x86_64-1.22.0/lib" >> $GITHUB_PATH

    - name: Build
      run: |
        echo "Starting build for target: ${{ matrix.target }}"
        cargo build --release --target ${{ matrix.target }} --bin rwkvtts_server --verbose
      env:
        RUST_BACKTRACE: 1



    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path artifacts
        # Create release directory structure
        New-Item -ItemType Directory -Force -Path release-package
        # Copy executable
        Copy-Item "target\${{ matrix.target }}\release\${{ matrix.artifact_name }}" "release-package\"
        # Copy onnxruntime.dll
        Copy-Item "assets\ort\onnxruntime.dll" "release-package\"
        # Copy assets/raf directory
        Copy-Item -Recurse "assets\raf" "release-package\"
        # Create zip package
        Compress-Archive -Path "release-package\*" -DestinationPath "artifacts\${{ matrix.asset_name }}"

    - name: Prepare artifact (Linux/macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p artifacts
        # Create release directory structure for Linux/macOS
        mkdir -p release-package
        # Copy executable
        cp target/${{ matrix.target }}/release/rwkvtts_server release-package/
        # Copy ONNX Runtime dynamic library
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp onnxruntime-linux-x64-1.22.0/lib/libonnxruntime.so release-package/
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp onnxruntime-osx-x86_64-1.22.0/lib/libonnxruntime.dylib release-package/
        fi
        # Copy assets/raf directory
        cp -r assets/raf release-package/
        # Create tar.gz package
        cd release-package
        tar -czf ../artifacts/${{ matrix.asset_name }} .
        cd ..

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}